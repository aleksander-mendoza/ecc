#version 450
#extension GL_GOOGLE_include_directive : enable
#extension GL_KHR_shader_subgroup_basic : enable
//#extension GL_EXT_debug_printf : enable
#define IS_AVAILABLE_BUFFER_TMP_FACES_COPY
#define IS_AVAILABLE_BUFFER_FACES_TO_BE_REMOVED
#define IS_AVAILABLE_BUFFER_FACES_TO_BE_INSERTED
#define IS_AVAILABLE_BUFFER_FACES

#include "descriptors_ambience.comp"
layout (local_size_x_id = GROUP_SIZE_CONST_ID) in;
#include "utils.comp"


// The array needs to store offset to each chunk faces (both opaque and transparent),
// so there must be 2*TOTAL_CHUNKS elements.
const uint ARR_LEN = 2*TOTAL_CHUNKS;
shared uvec2 face_offset_per_chunk[ARR_LEN];

void main() {

    const uint lID = gl_LocalInvocationID.x;
    for (uint chunk_offset=lID;chunk_offset < ARR_LEN;chunk_offset+=GROUP_SIZE){
        uint inserted_count = get_inserted_face_count(chunk_offset);
        uint removed_count = get_removed_face_count(chunk_offset);
        uint original_face_count = get_chunk_face_count_at(chunk_offset);
        uvec2 face_counts = uvec2(original_face_count + inserted_count - removed_count, original_face_count);
        face_offset_per_chunk[chunk_offset] = face_counts;
    }
    // parallel summation algorithm, that sums up all entries to the left of each array cell (inclusive)
    for(int shift=1;shift<ARR_LEN;shift*=2){
        for (int i=int(ARR_LEN)-1-int(lID);i-shift >= 0;i-=int(GROUP_SIZE)){
            const uvec2 sum = face_offset_per_chunk[i] + face_offset_per_chunk[i-shift];
            subgroupBarrier();
            face_offset_per_chunk[i] = sum;
        }
    }
    for (uint chunk_offset=lID;chunk_offset < ARR_LEN;chunk_offset+=GROUP_SIZE){
        //now face_offset_per_chunk[chunk_offset] holds information about total number of faces in all chunks from 0 up to chunk_offset (inclusive).
        uvec2 face_offsets = face_offset_per_chunk[chunk_offset];
        set_faces_ending_offset(chunk_offset, face_offsets);
    }
}
