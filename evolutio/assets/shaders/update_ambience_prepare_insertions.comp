#version 450
#extension GL_GOOGLE_include_directive : enable
#extension GL_KHR_shader_subgroup_basic : enable
//#extension GL_EXT_debug_printf : enable
#define IS_AVAILABLE_BUFFER_FACES
#define IS_AVAILABLE_BUFFER_TMP_FACES_COPY
#define IS_AVAILABLE_BUFFER_FACES_TO_BE_REMOVED
#define IS_AVAILABLE_BUFFER_FACES_TO_BE_INSERTED


#include "descriptors_ambience.comp"
layout (local_size_x_id = GROUP_SIZE_CONST_ID) in;
#include "utils.comp"
shared uint shared_faces_to_be_removed[FACES_TO_BE_REMOVED_CHUNK_CAPACITY];
shared uint removed_faces_index_from_common_part;
shared uint copied_faces_idx;

uint positive_sub(uint x,uint y){
    return x>y?x-y:0;
}

void relocate_common(const uint[2] beginning, const uint[2] ending, const uint removed_face_count,
                     const uint chunk_offset, const uint lID, const uint offset_to_relocated_leading_faces,
                     const uint tmp_faces_copy_chunk_offset){
    uint part = 0;
    uint face_offset = offset_to_relocated_leading_faces+lID;
    Face face_to_relocate = faces[TOTAL_CHUNKS*2+face_offset];
    int i=-1;

    while(true){
        while(face_offset >= ending[part]){
            part++;
            if(part>=2){
                return;
            }
            face_offset = beginning[part] + lID;
            face_to_relocate = faces[TOTAL_CHUNKS*2+face_offset];
        }
        i++;
        if(i==removed_face_count||shared_faces_to_be_removed[i]==face_to_relocate.x){
            if(i==removed_face_count) {
                uint offset = 3*atomicAdd(copied_faces_idx,1);
                tmp_faces_copy[tmp_faces_copy_chunk_offset+offset+1] = face_to_relocate.x;
                tmp_faces_copy[tmp_faces_copy_chunk_offset+offset+2] = face_to_relocate.y;
            }
            face_offset+=GROUP_SIZE;
            face_to_relocate = faces[TOTAL_CHUNKS*2+face_offset];
            i=-1;
        }
    }
}

void main() {

    const uint chunk_offset = gl_WorkGroupID.x;
    const uint lID = gl_LocalInvocationID.x;

    const uint inserted_face_count = get_inserted_face_count(chunk_offset);
    const uint removed_face_count = get_removed_face_count(chunk_offset);
    //this data is no longer needed and should be reset before next sumilation step
    set_inserted_face_count(chunk_offset, 0);
    set_removed_face_count(chunk_offset, 0);
    const uint new_faces_beginning_offset = get_new_faces_beginning_offset(chunk_offset);
    const uint original_faces_beginning_offset = get_original_faces_beginning_offset(chunk_offset);
    const uint new_faces_ending_offset = get_new_faces_ending_offset(chunk_offset);
    const uint original_faces_ending_offset = get_original_faces_ending_offset(chunk_offset);
    const uint new_faces_count_in_chunk = new_faces_ending_offset - new_faces_beginning_offset;
    for(uint i=lID;i<removed_face_count;i+=GROUP_SIZE){
        shared_faces_to_be_removed[i] = faces_to_be_removed[chunk_offset*FACES_TO_BE_REMOVED_CHUNK_CAPACITY + i];
    }
    /**
    We are trying to update faces of all chunks and they are stored in contiguous memory buffer.
    Let's say that we have 3 chunks: A, B and C.
    A0 is the first face of chunk A, A1 is its second face and so on.
    After ambience update, the number of faces in all chunks might change.
    Let's focus on chunk B for now.

    It might be the case that chunk A will shrink, and we need to shift entire chunk B to the left.
    faces(before)=[A0, A1, A2, B0, B1, B2, B3, C0, C1]
    faces(after)= [A0, A1, B3, B0, B1, B2, C1, C0]
    In this scenario we have 1 assignable_leading_face, which is the face A2. That's because we can overrite A2
    with B3 without having to worry about overwriting any existing faces of B.
    We also have one relocated_trailing_face, which is exactly the face B3. The relocated
    face used to belong to B, but after update will be overwritten by C1, so we have to relocate it
    somewhere safe.

    Now let's consider a case where we want to remove A2 and B0.
    faces(before)=[A0, A1, A2, B0, B1, B2, B3, C0, C1]
    faces(after)= [A0, A1, B3, B2, B1, C0, C1]
    Chunk B had one assignable_leading_face (the face A2) but it will also have
    removed_face_count==1 (the face B3 is on the shared_faces_to_be_removed list).
    Notice that the chunk B before and after update have an overlapping common part of the buffer,
    which spans [B0, B1]. The common part are all indices in the face buffer that used to belong to B
    and will still belong to be even after update. This is in contrast with leading_assignable_faces, which used to belong to some other
    chunk but will now belong to B. The assignable_trailing_faces work analogically but instead of shifting B to the left
    (like in the case when A shrinks), B will be moved to the right (like in the case when A expands, or perhaps when A stays constand but
    we insert to B and then it has to expand to the right).
    The relocated_leading_faces appear in the opposite situation. Those face indices used to belong to B but after update will
    belong to some other chunk.
    */
    const uint common_part_beginning = max(new_faces_beginning_offset,original_faces_beginning_offset);
    const uint common_part_ending = min(new_faces_ending_offset,original_faces_ending_offset);
    const uint offset_to_assignable_leading_faces = new_faces_beginning_offset;
    const uint number_of_assignable_leading_faces = positive_sub(min(original_faces_beginning_offset, new_faces_ending_offset), offset_to_assignable_leading_faces);
    const uint offset_to_assignable_trailing_faces = max(original_faces_ending_offset, new_faces_beginning_offset);
    const uint number_of_assignable_trailing_faces = positive_sub(new_faces_ending_offset, offset_to_assignable_trailing_faces);
    const uint offset_to_relocated_leading_faces = original_faces_beginning_offset;
    const uint number_of_relocated_leading_faces = positive_sub(min(new_faces_beginning_offset, original_faces_ending_offset), offset_to_relocated_leading_faces);
    const uint offset_to_relocated_trailing_faces = max(new_faces_ending_offset, original_faces_beginning_offset);
    const uint number_of_relocated_trailing_faces = positive_sub(original_faces_ending_offset, offset_to_relocated_trailing_faces);
    const uint tmp_faces_copy_chunk_offset = offset_of_face_copy(new_faces_beginning_offset);

    for(uint i=lID;i<number_of_assignable_leading_faces;i+=GROUP_SIZE){
        tmp_faces_copy[tmp_faces_copy_chunk_offset+3*i] = offset_to_assignable_leading_faces + i; //after relocation, some faces will need to be prepended. Here we populate assignable_face_indices
        // with offsets of all those leading faces that will have to be populated
    }
    for(uint i=lID;i<number_of_assignable_trailing_faces;i+=GROUP_SIZE){
        tmp_faces_copy[tmp_faces_copy_chunk_offset+3*(number_of_assignable_leading_faces+i)] = offset_to_assignable_trailing_faces + i; //after relocation, some faces will need to be appended. Here we populate assignable_face_indices
        // with offsets of all those trailing faces that will have to be populated
    }
    if(lID==0){
        removed_faces_index_from_common_part=number_of_assignable_leading_faces+number_of_assignable_trailing_faces;
        copied_faces_idx = 0;
    }
    uint face_offset = common_part_beginning+lID;
    uint face_coords = faces[TOTAL_CHUNKS*2+face_offset].x;
    int i=-1;
    while(face_offset<common_part_ending){
        i++;
        if(i==removed_face_count||shared_faces_to_be_removed[i]==face_coords){
            if(i<removed_face_count) {
                uint face_copy_offset = tmp_faces_copy_chunk_offset+3*atomicAdd(removed_faces_index_from_common_part,1);
                tmp_faces_copy[face_copy_offset] = face_offset;
            }
            face_offset+=GROUP_SIZE;
            face_coords = faces[TOTAL_CHUNKS*2+face_offset].x;
            i=-1;
        }
    }


    const uint relocated_leading_faces_ending = offset_to_relocated_leading_faces+number_of_relocated_leading_faces;
    const uint relocated_trailing_faces_ending = offset_to_relocated_trailing_faces+number_of_relocated_trailing_faces;
    const uint[2] ending = uint[2](relocated_leading_faces_ending, relocated_trailing_faces_ending);
    const uint[2] beginning = uint[2](offset_to_relocated_leading_faces, offset_to_relocated_trailing_faces);
    relocate_common(beginning,ending,removed_face_count,chunk_offset, lID, offset_to_relocated_leading_faces, tmp_faces_copy_chunk_offset);
    for(uint i=lID;i<inserted_face_count;i+=GROUP_SIZE){
        uint offset = 3*atomicAdd(copied_faces_idx,1);
        Face face_to_relocate = faces_to_be_inserted[chunk_offset*FACES_TO_BE_INSERTED_CHUNK_CAPACITY + i];
        tmp_faces_copy[tmp_faces_copy_chunk_offset+offset+1] = face_to_relocate.x;
        tmp_faces_copy[tmp_faces_copy_chunk_offset+offset+2] = face_to_relocate.y;
    }
    faces[chunk_offset].x = new_faces_count_in_chunk;// We should be ready to update the chunk size now.
    // Notice that in the end, if everything was correct, we will have
    // copied_faces_idx == removed_faces_index_from_common_part+number_of_assignable_leading_faces+number_of_assignable_trailing_faces
    subgroupBarrier(); // Let's make sure that copied_faces_idx has been incremented by all threads.
    if(lID==0){
        set_copied_face_count(chunk_offset, copied_faces_idx);
    }

}
