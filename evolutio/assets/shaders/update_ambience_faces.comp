#version 450
#extension GL_GOOGLE_include_directive : enable
//#extension GL_EXT_debug_printf : enable
#define IS_AVAILABLE_BUFFER_GLOBAL_MUTABLES
#define IS_AVAILABLE_BUFFER_TMP_FACES_COPY
#define IS_AVAILABLE_BUFFER_WORLD
#define IS_AVAILABLE_BUFFER_WORLD_COPY
#define IS_AVAILABLE_BUFFER_FACES_TO_BE_REMOVED
#define IS_AVAILABLE_BUFFER_FACES_TO_BE_INSERTED
#define IS_AVAILABLE_BUFFER_BLOCKS_TO_BE_INSERTED_OR_REMOVED
layout (local_size_x = 32) in;

#include "descriptors_ambience.comp"
#include "utils.comp"

void insert_face(uint face_coords, uint texture_id,uint chunk_x, uint chunk_z, uint chunk_idx, float opacity){
    uint tex_id = pack_chunk_pos_and_tex_id(chunk_x, chunk_z, texture_id);
    uint chunk_offset = chunk_idx + uint(opacity < 1.0)*TOTAL_CHUNKS;
    uint face_offset = atomic_increment_inserted_face_count(chunk_offset);
    faces_to_be_inserted[chunk_offset*FACES_TO_BE_INSERTED_CHUNK_CAPACITY + face_offset] = uvec2(face_coords,tex_id);
}

void remove_face(uint face_coords, uint chunk_idx, float opacity){
    uint chunk_offset = chunk_idx + uint(opacity < 1.0)*TOTAL_CHUNKS;
    uint face_offset = atomic_increment_removed_face_count(chunk_offset);
    faces_to_be_removed[chunk_offset*FACES_TO_BE_REMOVED_CHUNK_CAPACITY + face_offset] = face_coords;
}

void main() {

    const uint gID = gl_GlobalInvocationID.x;
    const uint blocks_to_be_inserted_or_removed_count = global_mutables.blocks_to_be_inserted_or_removed;
    if (gID < blocks_to_be_inserted_or_removed_count){
        const uint block_idx = blocks_to_be_inserted_or_removed[gID];
        const uvec3 block_pos = world_idx_into_block_pos(block_idx);
        const uint block_old_id = get_block_id(block_idx);
        const uint block_new_id = get_block_id_copy(block_idx);
        const float block_old_opacity = BLOCK_OPACITY[block_old_id];
        const float block_new_opacity = BLOCK_OPACITY[block_new_id];
        const uint chunk_x = block_pos.x / CHUNK_WIDTH;
        const uint chunk_z = block_pos.z / CHUNK_DEPTH;
        const uint chunk_idx = chunk_pos_into_chunk_idx(chunk_x,chunk_z);
        const uvec3 block_pos_relative_to_chunk = uvec3(block_pos.x - chunk_x*CHUNK_WIDTH, block_pos.y,block_pos.z - chunk_z*CHUNK_DEPTH);
        const uvec3[6] neighbours = uvec3[6](
            uvec3(1, 0, 0),
            uvec3(-1, 0, 0),
            uvec3(0, 1, 0),
            uvec3(0, -1, 0),
            uvec3(0, 0, 1),
            uvec3(0, 0, -1)
        );
        for (int face_orientation=0; face_orientation<6;face_orientation++){
            const uvec3 neighbour_pos = block_pos + neighbours[face_orientation];
            const uint neighbour_chunk_x = neighbour_pos.x / CHUNK_WIDTH;
            const uint neighbour_chunk_z = neighbour_pos.z / CHUNK_DEPTH;
            const uint neighbour_chunk_idx = chunk_pos_into_chunk_idx(neighbour_chunk_x,neighbour_chunk_z);
            const uvec3 neighbour_block_pos_relative_to_chunk = uvec3(neighbour_pos.x - neighbour_chunk_x*CHUNK_WIDTH, neighbour_pos.y,neighbour_pos.z - neighbour_chunk_z*CHUNK_DEPTH);
            if (is_in_world_borders(neighbour_pos)){ //if pos.x==0 then pox.x-1==MAX_INT which obviously must be greater than world border
                const uint neighbour_idx = block_pos_into_world_idx(neighbour_pos);
                const uint neighbour_block_old_id = get_block_id(neighbour_idx);
                const uint neighbour_block_new_id = get_block_id_copy(neighbour_idx);
                const float neighbour_old_opacity = BLOCK_OPACITY[neighbour_block_old_id];
                const float neighbour_new_opacity = BLOCK_OPACITY[neighbour_block_new_id];
                const bool is_neighbour_unchanged = neighbour_block_old_id == neighbour_block_new_id;
                const bool neighbour_had_face = block_old_opacity < neighbour_old_opacity;
                const bool neighbour_has_face = block_new_opacity < neighbour_new_opacity;
                const bool i_had_face = block_old_opacity > neighbour_old_opacity;
                const bool i_have_face = block_new_opacity > neighbour_new_opacity;
                // Now, here we have to check for is_neighbour_unchanged.
                // Notice that if the neighbour has not changed, then we are safe to add or remove it's faces.
                // However, if the neighbour did change, then it must be
                // somewhere among blocks_to_be_inserted_or_removed, and so
                // there must be some other parallel thread running just for it.
                // That thread will take care of adding and removing its own faces.
                // This way we avoid duplicate removals/additions of the same face twice.
                if(neighbour_had_face && !neighbour_has_face && is_neighbour_unchanged){
                    const uint face_coords = block_pos_relative_to_chunk_and_orientation_into_face_coords(uvec4(neighbour_block_pos_relative_to_chunk,opposite_orientation(face_orientation)));
                    remove_face(face_coords,neighbour_chunk_idx,neighbour_old_opacity);
                }
                if(!neighbour_had_face && neighbour_has_face && is_neighbour_unchanged){
                    const uint op_face = opposite_orientation(face_orientation);
                    const uint neighbour_new_texture = BLOCK_TEXTURE_IDS[neighbour_block_new_id][op_face];
                    const uint face_coords = block_pos_relative_to_chunk_and_orientation_into_face_coords(uvec4(neighbour_block_pos_relative_to_chunk,op_face));
                    insert_face(face_coords,neighbour_new_texture,neighbour_chunk_x,neighbour_chunk_z,neighbour_chunk_idx,neighbour_new_opacity);
                }
                if(i_had_face && !i_have_face){
                    const uint face_coords = block_pos_relative_to_chunk_and_orientation_into_face_coords(uvec4(block_pos_relative_to_chunk,face_orientation));
                    remove_face(face_coords,chunk_idx,block_old_opacity);
                }
                if(!i_had_face && i_have_face){
                    const uint my_new_texture = BLOCK_TEXTURE_IDS[block_new_id][face_orientation];
                    const uint face_coords = block_pos_relative_to_chunk_and_orientation_into_face_coords(uvec4(block_pos_relative_to_chunk,face_orientation));
                    insert_face(face_coords,my_new_texture,chunk_x,chunk_z,chunk_idx,block_new_opacity);
                }
            }
        }
    }
}
