#version 450
#extension GL_GOOGLE_include_directive : enable
//#extension GL_EXT_debug_printf : enable

#define IS_AVAILABLE_BUFFER_PLAYER_EVENT
#define IS_AVAILABLE_BUFFER_GLOBAL_MUTABLES
#define IS_AVAILABLE_BUFFER_BONES
#define IS_AVAILABLE_BUFFER_WORLD
#define IS_AVAILABLE_BUFFER_COLLISION_GRID

#include "descriptors_compute.comp"

layout (local_size_x_id = GROUP_SIZE_CONST_ID) in;

#include "utils.comp"

void main() {
    uint gID = gl_GlobalInvocationID.x;
    const uint bone_count = global_mutables.bones;
    if(gID==0){
        if (player_event.event_type == PLAYER_EVENT_THROW){
            // vec3_slot0 holds current player position
            // vec3_slot1 holds throwing velocity
            collision_grid[broad_phase_position_to_cell_idx(bones[0].old_center)].len = 0;
            bones[0].old_center = player_event.vec3_slot0;
            bones[0].new_center = player_event.vec3_slot0 + player_event.vec3_slot1;
        }
    }
    if (gID < bone_count){
        const Bone bone = bones[gID];
        vec3 velocity = bone.new_center - bone.old_center;
        velocity += bone.impulse * PHYSICS_SIMULATION_DELTA_TIME_PER_STEP / bone.mass;
        velocity.y -= GRAVITY * PHYSICS_SIMULATION_DELTA_TIME_PER_STEP;
        velocity *= DAMPING_COEFFICIENT;
        vec3 half_hitbox = vec3(bone.half_side_length,bone.half_height,bone.half_side_length);
        vec3 hitbox_from = bone.new_center-half_hitbox;
        vec3 hitbox_to = bone.new_center+half_hitbox;
        vec3 hitbox_to_ceil = ceil(hitbox_to);
        ivec3 start = ivec3(hitbox_from);
        ivec3 end = ivec3(hitbox_to_ceil);
        bvec3 is_start_limited_by_world_borders = equal(start,ivec3(0,0,0));
        bvec3 is_end_limited_by_world_borders = lessThan(WORLD_BORDERS,end);
        const vec3 velocity_before_block_collisions = velocity;
        bvec3 velocity_sign = lessThan(velocity,vec3(0,0,0));
        bvec3 will_hitbox_move_to_next_block = mix(lessThan(hitbox_to_ceil, hitbox_to + velocity),lessThan(hitbox_from + velocity, vec3(start)),velocity_sign);
        for(int dim=0;dim<3;dim++){
            bool neg = velocity_sign[dim];
            if(will_hitbox_move_to_next_block[dim]){
                bool bounded_by_world_border = neg ? start[dim] <= 0 : end[dim] >= WORLD_BORDERS[dim];
                if (bounded_by_world_border){
                    velocity[dim] = 0;
                } else {
                    uvec3 from = uvec3(start);
                    uvec3 to = uvec3(end);
                    // Every box has 6 faces and 8 edges. We need to check all the blocks that touch those faces and edges.
                    // If they do, then we zero-out the respective components of velocity vector
                    // Some optimisation can be made. If we know which direction the box is moving, we do not need to check the faces that
                    // are "behind" it. We only check those that are "in front".
                    // The code in the blow if-statement marks the region of blocks that touch a specific face.
                    if (neg){
                        from[dim]--;
                        to[dim] = uint(start[dim]);
                    } else {
                        from[dim] = uint(end[dim]);
                        to[dim]++;
                    }
                    for(uint y=from.y;y<to.y;y++){
                        for(uint z=from.z;z<to.z;z++){
                            for(uint x=from.x;x<to.x;x++){
                                if(!is_traversable(block_pos_into_world_idx(uvec3(x,y,z)))){
                                    velocity[dim] = 0;
                                }
                            }
                        }
                    }
                }
            }
        }
        will_hitbox_move_to_next_block = mix(lessThan(hitbox_to_ceil, hitbox_to + velocity),lessThan(hitbox_from + velocity, vec3(start)),velocity_sign);
        const uvec3[3] dimensions_per_edge = uvec3[3](
            // An edge can be carachterised by the two faces that it joins.
            // The normal vector of each face will point in a specific direction (like vec3(1,0,0), vec3(0,1,0), vec3(0,0,1) or negation of any of these ).
            // So one way to identify each edge is by first storing the dimension (axis) along which one normal vector of one face is pointing, then store
            // the dimensions of the vector of the other face.
            uvec3(/*dimension(axis) of the normal of first face*/0,/*dimension of the normal of second face*/1, /*dimension along which the edge itself lies*/2),
            uvec3(1,2,0),
            uvec3(2,0,1)
        );
        const ivec3 common_corner_block = mix(end+1, start-1, velocity_sign);
        const ivec3 opposite_corner_block = mix(start, end, velocity_sign);
        const ivec3 velocity_direction = mix(ivec3(-1,-1,-1),ivec3(1,1,1),velocity_sign);
        for(uint edge=0;edge<2;edge++){
            const uvec3 dimensions = dimensions_per_edge[edge];
            if(will_hitbox_move_to_next_block[dimensions.x] && will_hitbox_move_to_next_block[dimensions.y]){
                const int step = velocity_direction[dimensions.z];
                uvec3 block_on_edge = common_corner_block;
                while(true){
                    block_on_edge[dimensions.z]+=step;
                    if(!is_traversable(block_pos_into_world_idx(uvec3(block_on_edge)))){
                        velocity[dimensions.x] = 0;
                        velocity[dimensions.y] = 0;
                        break;
                    }
                    if(block_on_edge[dimensions.z]==opposite_corner_block[dimensions.z]){
                        break;
                    }
                }
            }
        }
//        if(all(notEqual(velocity,vec3(0,0,0))) && !is_traversable(block_pos_into_world_idx(uvec3(common_corner_block)))){
//            velocity=vec3(0,0,0);
//        }
        bones[gID].old_center = bone.new_center;
        bones[gID].new_center = bone.new_center + velocity*mix(BLOCK_COLLISION_FRICTION,1.,velocity == velocity_before_block_collisions);
        bones[gID].impulse = (velocity - velocity_before_block_collisions)*BLOCK_RIGIDITY;
    }
}
